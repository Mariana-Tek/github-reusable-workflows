name: Build and push to ECR

# This creates an container image and pushed it to an ECR repository.
#
# For this to work, the following 'secrets' must be added to this github repository:
#
# * AWS_REGION -- The region where the ECR repository resides
# * AWS_RESOURCE_NAME_PREFIX -- The ECR repository name
# * BUILD_AWS_IAM_ROLE_ARN -- Github OIDC Connect enabled IAM role (https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services)

on:
  workflow_call:
    inputs:
      tag_name:
        type: string
        default: latest
      extra_build_args:
        type: string
        default: ""
      dry_run:
        type: boolean
        default: false

env:
  DOCKER_BUILDKIT: 1
  ECR_REPOSITORY: ${{ secrets.AWS_RESOURCE_NAME_PREFIX }}
  IMAGE_TAG: ${{ github.sha }}

# permission can be added at job level or workflow level
permissions:
  id-token: write # Required to get the ID Token that will be used for OIDC
  contents: read # Required for actions/checkout

jobs:
  build: #Build and push image to ECR
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.BUILD_AWS_IAM_ROLE_ARN }}
          role-session-name: OIDCSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag image
        run: |
          if [ "${{ inputs.dry_run }}" == "false" ]
          then
            docker build --build-arg VERSION=${{ github.sha }} \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.tag_name }} \
              ${{ inputs.extra_build_args }} .
          else
            echo "DRYRUN: Run command to build image"
          fi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      - name: Push image to Amazon ECR
        run: |
          if [ "${{ inputs.dry_run }}" == "false" ]
          then
            docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
          else
            echo "DRYRUN: Run command to push image to $ECR_REGISTRY/$ECR_REPOSITORY"
          fi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
