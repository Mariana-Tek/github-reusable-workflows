name: retag image

# Triggers the deploy (Codepipeline) pipeline when a container
# image is updated.  This results in an event to be emitted and
# Codepipeline is configured to listen to ECR events and will
# start when the event contains its image tag.   There is one
# image tag per environment.

# For this to work, the following 'secrets' must be added to this github repository:
#
# * AWS_REGION -- The region where the ECR repository resides
# * AWS_ECR_ACCOUNT_URL --
# * AWS_RESOURCE_NAME_PREFIX --
# * BUILD_AWS_IAM_ROLE_ARN -- Github OIDC Connect enabled IAM role (https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services)

on:
  workflow_call:
    inputs:
      commit_id: # This may be the git tag, commit id or branch name.
        required: true
        type: string
      image_tag: # Tag to add to the container image
        required: true
        type: string

# permission can be added at job level or workflow level
permissions:
  id-token: write # Required to get the ID Token that will be used for OIDC
  contents: write # Required for actions/checkout

jobs:
  retag:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.BUILD_AWS_IAM_ROLE_ARN }}
          role-session-name: OIDCSession

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Retag image
        run: |
          MANIFEST=$(aws ecr batch-get-image --repository-name ${{ secrets.AWS_RESOURCE_NAME_PREFIX }} --image-ids imageTag=${{ inputs.commit_id }} --query 'images[].imageManifest' --output text)
          if ! aws ecr put-image --repository-name ${{ secrets.AWS_RESOURCE_NAME_PREFIX}} --image-tag ${{ inputs.image_tag }} --image-manifest "${MANIFEST}"; then
          # Upload failed.  Let's see if it's due to previously being tagged with the same tag.
            IMAGE_META="$(aws ecr describe-images --repository-name ${{ secrets.AWS_RESOURCE_NAME_PREFIX }} --image-ids imageTag=${{ inputs.commit_id }} --image-ids imageTag=${{ inputs.image_tag }} 2> /dev/null )" #lookup for exisiting image
            if [[ $? == 0 ]]; then
              IMAGE_TAGS="$( echo ${IMAGE_META} | jq '.imageDetails[0].imageTags[0]' -r )"
              echo "image with the version ${{ inputs.commit_id }} and tag ${{ inputs.image_tag }} in the repo ${{ secrets.AWS_RESOURCE_NAME_PREFIX }} already exists. Exiting."
            else
              # Failed to upload image for some other reason
              exit 1
            fi
          fi
