name: Terraform

# Runs Terraform in a preview mode when a PR is opened and
# the changes are applied when it's merged into production.
# https://learn.hashicorp.com/tutorials/terraform/github-actions

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      config:
        description: "key value pair separated by a semi-colon"
        type: string
        required: true
      aws_remote_role_arn:
        description: AWS IAM role to access the Terraform remote state
        type: string
        required: false
        default: "arn:aws:iam::424765940475:role/p-bt-github-terraform-state-role"
      separator:
        description: "character using to separate the elements of the CI confguration file"
        type: string
        required: false
        default: "_"
      tfvarfile_override:
        description: "Used to specify a config that isn't found in convential means. Used for scheduled runs."
        type: string
        required: false
        default: ""

# permission can be added at job level or workflow level
permissions:
  id-token: write
  contents: write # This is required for actions/checkout
  issues: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  TF_VAR_remote_state_role_arn: ${{ inputs.aws_remote_role_arn }} # Terraform uses this

defaults:
  run:
    shell: bash

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Select installation to manage
        run: |
          for pair in $(echo "${{ inputs.config }}" | tr ';' ' ')
          do
                  echo $pair >> $GITHUB_ENV
          done

      - name: Select CI configuration file
        run: |
          # Find the file to configuration file when Terraform run as a Github Action
          if [[ -f "config/${{ env.REGION }}${{ inputs.separator }}${{ env.ENVIRONMENT }}${{ inputs.separator }}ci.tfvars" ]]; then
            echo "CI_VAR_FILE=config/${{ env.REGION }}${{ inputs.separator }}${{ env.ENVIRONMENT }}${{ inputs.separator }}ci.tfvars" >> $GITHUB_ENV
          elif [[ -f "config/${{ env.ENVIRONMENT }}${{ inputs.separator }}ci.tfvars" ]]; then
            echo "CI_VAR_FILE=config/${{ env.ENVIRONMENT }}${{ inputs.separator }}ci.tfvars" >> $GITHUB_ENV
          elif [[ -f "config/general${{ inputs.separator }}ci.tfvars" ]]; then
            # Used only in the prerequisites
            echo "CI_VAR_FILE=config/general${{ inputs.separator }}ci.tfvars" >> $GITHUB_ENV
          else
            echo "ERROR: The configuration file for Github Actions is missing!"
            exit 1
          fi

      - name: Set Terraform version
        run: |
          TERRAFORM_VERSION=$(cat ${{ github.workspace }}/.terraform-version)
          echo "TERRAFORM_VERSION=$TERRAFORM_VERSION" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE_ARN }}
          role-session-name: terraform

      - name: Terraform Init
        id: init
        run: |
          make setup
        env:
          INIT_OPTS: -backend-config="assume_role={role_arn=\"${{ env.TF_VAR_remote_state_role_arn }}\"}"
          GIT_SSH_COMMAND:
            "echo '${{ secrets.ACTIONS_SSH_PRIVATE_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"

      - name: Terraform Plan
        id: plan
        run: |
          make plan
        env:
          PLAN_OPTS: -no-color -var-file=${{ env.CI_VAR_FILE }}
          TFVARFILE_OVERRIDE: ${{ inputs.tfvarfile_override }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: make apply
